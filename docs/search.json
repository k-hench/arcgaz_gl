[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Antarctic Fur Seal Genetic Load",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "qmd/01_sample_selection.html",
    "href": "qmd/01_sample_selection.html",
    "title": "1Â  Sample selection",
    "section": "",
    "text": "toggle code\ntroubblemakers <- c(\n   \"AGP00150\", # 2_explore..., l 23, duplicated tissue id\n   \"AGP08134\", # 2_explore..., l 65 ff potential sample mixup\n   \"AGP08139\", #                       continued\n   \"AGP18084\"  # 2_explore..., l 69, mum genetic mismatch\n   # REMEMBER TO ALSO EXCLUDE THE SAMPLES THAT HAVE ALREADY BEEN RESEQED\n)\n\n\nRead in Annekes cleaned sample list. Then, give an overview of the available samples over the years, stratified by recruitment success and SNP genotype availability.\n\n\ntoggle code\ndata <- readxl::read_xlsx(here(\"../import_anneke/data/processed/Unique_filtered_dataset_2022.xlsx\")) |> \n  dplyr::select(PupTissueID, uniqueID_pup, PupBirthyear, status, PupSex, pup_SNPed, Beach) |> \n  filter(Beach == \"SSB\",\n         PupSex == \"F\",\n         !is.na(PupBirthyear),\n         !(PupTissueID %in% troubblemakers))\n\n# data |> \n#   group_by(uniqueID_pup) |> \n#   count() |> arrange(-n) \n#  # group_by(n) |>\n#  # count()\n\ndata |> \n  filter(!duplicated(uniqueID_pup)) |> \n  group_by(PupBirthyear, status, pup_SNPed) |> \n  count() |> \n  ggplot() +\n  # geom_hline(yintercept = 2, linetype = 3 ) +\n  geom_bar(aes(x = PupBirthyear, y = n, fill = status),\n           stat = \"identity\",\n           position = position_dodge2(width = 0.9, preserve = \"single\"),\n           color = \"transparent\") +\n  facet_grid(pup_SNPed ~ .,\n             labeller = label_both,\n             switch = \"y\") +\n  scale_fill_manual(values = clrs) +\n  theme(legend.position = \"bottom\",\n        axis.line.x = element_line(size = .2),\n        legend.key.height = unit(2, \"pt\"))\n\n\n\n\n\nTo be able to include information about the available DNA extractions into the sample selection, we read in the tissue sample specific concentrations and merge them to the data.\n\n\ntoggle code\ndata_con <- readxl::read_xlsx(here(\"../import_anneke/data/processed/Agaz_DNA_extraction_info.xlsx\")) |> \n   rename(PupTissueID = SampleID)\n \ndata_with_con <- data |> \n  mutate(fitness_class = if_else(status %in% c(\"BeachDead\", \"NonRecruited\"),\n                                 \"NonRecruited\", status)) |> \n  filter(!duplicated(uniqueID_pup),\n         PupSex == \"F\",\n         fitness_class %in% c(\"Recruited\", \"NonRecruited\") ) |>\n  left_join(data_con)\n\ncon_threshold <- 45\n\n\nThan we compute a weighting column based on the pico-green concentration, by replacing values below 45 as well as NA with random negative numbers between -150 and -100 (to penalize those samples in the random draw later).\n\n\ntoggle code\ndata_top_con <- data_with_con |> \n  group_by(PupBirthyear, status, pup_SNPed) |> \n  mutate(con_where_possible = if_else(is.na(Picogreen_con) | Picogreen_con < con_threshold,\n                                      runif(n = length(Picogreen_con), -150, -100),\n                                      Picogreen_con))\n\n\nFor each year, one sample is randomly chosen per recruitment status. Try to use only SNPed samples, if necessary fill up with un-SNPed samples where possible (if only one sample is available, pick this one).\n\n\ntoggle code\ndata_selection <- data_top_con |> \n  mutate(fitness_class = if_else(status %in% c(\"BeachDead\", \"NonRecruited\"),\n                                 \"NonRecruited\", status)) |>\n  filter(!duplicated(uniqueID_pup),\n         PupSex == \"F\",\n         fitness_class %in% c(\"Recruited\", \"NonRecruited\"),\n         !grepl(PlateNumber, pattern = \"[A-Za-z]\"),\n         !is.na(PlateNumber)) |> \n  group_by(PupBirthyear, status, pup_SNPed) |> \n  slice_sample(n = 1, weight_by = scales::rescale(con_where_possible)) |> \n  # mutate(selector = sample(1:n())) |> # random selection order within year x fitness_class\n  # filter(selector <= 2) |>            # slice_sample(n = 2) cant subset for years with only one sample \n  ungroup() |> \n  arrange(PupBirthyear, status, pup_SNPed) |> \n  group_by(PupBirthyear, status) |> \n  mutate(priority = row_number()) |>\n  ungroup() |> \n  filter(priority <= 1) |>             # if possible, use SNPed samples, fill up if necessary\n  mutate(uniqueID_pup = if_else(is.na(uniqueID_pup),   # the sample from 1977 is IDed as <NA>\n                                \"ID_00\", uniqueID_pup)) |> # change to ID_00\n  mutate(y = c(Recruited = .5,            # adding coordinates for visualization\n               NonRecruited = -.5,\n              BeachDead = -1.5)[status])                      \n\n\nLooking up available alternative tissue samples for the selected individuals.\n\n\ntoggle code\n# Collect alternative tissue IDs\nuniqueIDs <- openxlsx::read.xlsx(here(\"../import_anneke/data/processed/all_msat_genotypes_uniqueID.xlsx\")) %>% \n  dplyr::select(dummyID, PlateNumber, uniqueID) |> \n  filter(!dummyID %in% c(\"AGP08134\", \"AGP18084\")) |>\n  dplyr::select(-PlateNumber) |> \n  unique()\n\n# Merge IDs with list of remaining individuals\ntissue_options <- data_selection |> \n  left_join(uniqueIDs, by = c(\"uniqueID_pup\" = \"uniqueID\")) |> \n  dplyr::rename(`AltTissueID`= dummyID ) |> \n  mutate(pup_SNPed = if_else(is.na(pup_SNPed), FALSE, pup_SNPed))\n\nall_duplicated <- \\(x){\n  duplicated(x) | duplicated(x, fromLast = TRUE)\n}\n\ntissue_options %>%\n  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%\n  group_by(uniqueID_pup) %>%\n  arrange(AltTissueID) %>%\n  mutate(numbering = paste0(\"AltTissueID_\", row_number())) %>%\n  pivot_wider(id_cols = PupTissueID:Beach,\n              names_from = \"numbering\",\n              values_from = \"AltTissueID\") |> \n  dplyr::select(uniqueID_pup:Beach, everything()) |> \n  arrange(PupBirthyear)  |> \n  datatable(extensions = 'Buttons',\n            options = list(dom = 'Blfrtip',\n                           buttons = c('copy', 'csv'),\n                           pageLength = 10), \n            rownames = FALSE, \n            class = 'cell-border stripe') |>  \n  formatStyle(columns = 1:10,\n              fontSize = '75%',\n              lineHeight = \"1em\")\n\n\n\n\n\n\n\n\nSummarize the sample selection by strata (year, recruitment success, SNP availability).\n\n\ntoggle code\nselection_summary <- data_selection |> \n  group_by(PupBirthyear, status, pup_SNPed) |> \n  summarise(n = n(),\n            y = y[[1]]) |> \n  mutate(fitness_class = if_else(status %in% c(\"BeachDead\", \"NonRecruited\"),\n                                 \"NonRecruited\", status))\n\nlab_c <- \\(clr, lab){glue::glue(\"<span style='color:{clr}'>{lab}</span> \")}\n\ndata_selection |> \nggplot(aes(x = PupBirthyear)) +\n  geom_rect(aes(xmin = PupBirthyear - .475,\n                xmax = PupBirthyear + .475,\n                ymin = y - .475,\n                ymax = y + .475,\n                fill = status),\n           color = \"transparent\") +\n  geom_text(data = selection_summary |>\n              group_by(status, pup_SNPed) |> \n              summarise(n = sum(n),\n                        y = y[[1]]) |> \n              ungroup() ,\n            aes(x = 1974, y = y, label = n, color = status),\n            family = fnt_sans) +\n  geom_text(data = data_selection |> \n              filter(!is.na(Picogreen_con)),\n            aes(y = y, label = glue::glue(\"({PlateNumber}/{PlateLocation}) {round(Picogreen_con)}\")),\n            angle = 90, color = \"white\", family = \"Josefin sans\", fontface = \"bold\", size = 3) +\n  facet_grid(pup_SNPed ~ ., \n             labeller = label_both,\n             switch = \"y\") +\n  scale_fill_manual(values = clrs, guide = \"none\") +\n  scale_color_manual(values = clrs, guide = \"none\") +\n  scale_y_continuous(breaks = c(-1.5, -.5, .5),\n                     labels = map2_chr(rev(clrs), rev(names(clrs)), lab_c)) +\n  coord_cartesian(ylim = c(-2, 1)) +\n  theme(axis.text.y = ggtext::element_markdown(angle = 90, hjust = .5),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(),\n        strip.placement = \"outside\")\n\n\n\n\n\nFormat and export the sample selection to tsv file.\n\n\ntoggle code\nsample_selection_export <- tissue_options %>%\n  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%\n  group_by(uniqueID_pup) %>%\n  arrange(AltTissueID) %>%\n  mutate(numbering = paste0(\"AltTissueID_\", row_number())) %>%\n  pivot_wider(id_cols =  c(PupTissueID:fitness_class, Picogreen_con, PlateNumber, PlateLocation),\n              names_from = \"numbering\",\n              values_from = \"AltTissueID\") |> \n  arrange(-PupBirthyear, uniqueID_pup) |> \n  dplyr::select(unique_id = uniqueID_pup,\n                birth_year = PupBirthyear,\n                status, fitness_class,\n                sex = PupSex,\n                SNPed = pup_SNPed,\n                beach = Beach,\n                picogreen_concentration = Picogreen_con,\n                plate_number = PlateNumber,\n                plate_location = PlateLocation,\n                tissue_id = PupTissueID,\n                tissue_id_alt1 = AltTissueID_1)\n\nsample_selection_export |> \n  write_tsv(here(\"data\", \"samples_temporal.tsv\"))\n\n\nGlimpse at how the selected samples compare in terms of pico green concentration with the overall concentration distribution.\n\n\ntoggle code\ndata_con |> \n  filter(!is.na(Picogreen_con)) |> \n  ggplot(aes(x = Picogreen_con)) +\n  geom_density(data = data_selection |> \n  filter(!is.na(Picogreen_con)) ,\n               aes(color = status,\n                   fill = after_scale(prismatic::clr_alpha(color, .15)),\n                   y = ..count..),\n  adjust = .6) +\n    geom_density(aes(y = ..count.. / 25),\n               adjust = .6, linetype = 3) +\n   scale_color_manual(values = clrs, guide = \"none\") +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\n\n\n\n\n<!sâ\n\n\ntoggle code\nna_dash <- \\(x){if_else(is.na(x), \"-\", as.character(x))}\n\nsample_selection_export |> \n  mutate(status = factor(status, levels = c(\"Recruited\", \"NonRecruited\", \"BeachDead\")),\n         SNPed = factor(SNPed, levels = c(\"TRUE\", \"FALSE\"))) |> \n  arrange( SNPed, status, -picogreen_concentration) |> \n  ungroup() |> \n  mutate(picogreen_concentration = sprintf(\"%.1f\", picogreen_concentration),\n         across(everything(),\n                na_dash),\n         send_rank = row_number()) |>\n  dplyr::select(send_rank, everything()) |> \n  dplyr::select(-fitness_class) |> \n  knitr::kable(format =  \"latex\")\n\n\nâ>"
  }
]