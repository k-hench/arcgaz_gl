---
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Sample selection

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(dev = "svg",
                      comment = "#>",
                      dev.args = list(bg = "transparent"))

library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(DT)
library(patchwork)
source(here("R", "theme_kh.R"))
set.seed(42)
clrs <- c(Recruited = clr1,
          NonRecruited = clr2,
          BeachDead = clr3)
```

Samples with issues, to avoid for sample selection.

```{r}
troubblemakers <- c(
   "AGP00150", # 2_explore..., l 23, duplicated tissue id
   "AGP08134", # 2_explore..., l 65 ff potential sample mixup
   "AGP08139", #                       continued
   "AGP18084"  # 2_explore..., l 69, mum genetic mismatch
   # REMEMBER TO ALSO EXCLUDE THE SAMPLES THAT HAVE ALREADY BEEN RESEQED
)
```


Read in Annekes cleaned sample list.
Then, give an overview of the available samples over the years, stratified by recruitment success and SNP genotype availability.

```{r}
#| figure-width: 7
#| fig-height: 5
data <- readxl::read_xlsx(here("data", "lab", "Unique_filtered_dataset_2022.xlsx")) |> 
  dplyr::select(PupTissueID, uniqueID_pup, PupBirthyear, status, PupSex, pup_SNPed, Beach) |> 
  filter(Beach == "SSB",
         PupSex == "F",
         !is.na(PupBirthyear),
         !(PupTissueID %in% troubblemakers))

# data |> 
#   group_by(uniqueID_pup) |> 
#   count() |> arrange(-n) 
#  # group_by(n) |>
#  # count()

data |> 
  filter(!duplicated(uniqueID_pup)) |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  count() |> 
  ggplot() +
  # geom_hline(yintercept = 2, linetype = 3 ) +
  geom_bar(aes(x = PupBirthyear, y = n, fill = status),
           stat = "identity",
           position = position_dodge2(width = 0.9, preserve = "single"),
           color = "transparent") +
  facet_grid(pup_SNPed ~ .,
             labeller = label_both,
             switch = "y") +
  scale_fill_manual(values = clrs) +
  theme(legend.position = "bottom",
        axis.line.x = element_line(size = .2),
        legend.key.height = unit(2, "pt"))
```

To be able to include information about the available DNA extractions into the sample selection, we read in the tissue sample specific concentrations and merge them to the data.

```{r}
data_con <- readxl::read_xlsx(here("data", "lab", "Agaz_DNA_extraction_info.xlsx"),
                              col_types = c("text", "text", "text", "numeric","numeric", "text", "text")) |>  
   rename(PupTissueID = SampleID) # note that there are tissue duplications (eg AGF14017)
```

Meanwhile, the concentration of more samples has been measured:

```{r}
cellColor <- function(style) 
{
  fg  <- style$getFillForegroundXSSFColor()
  rgb <- tryCatch(fg$getRgb(), error = function(e) NULL)
  rgb <- paste(rgb, collapse = "")
  return(rgb)
}

row_colors <- \(xls_sheet,
                sheet_idx = 1,
                col_idx = 1){
  wb     <- loadWorkbook(xls_sheet)
  sheet1 <- getSheets(wb)[[sheet_idx]]
  
  # get all rows
  rows  <- getRows(sheet1)
  cells <- getCells(rows, colIndex = col_idx)
  styles <- sapply(cells, getCellStyle)
  purrr::map_chr(styles[2:length(styles)], cellColor)
}

clr_row <- \(row_color){
  if_else(row_color == "", "#ffffff", str_c("#", row_color))|>
           str_to_upper()
}

xls_david_con <- here("data/lab/All_unique_notSNPped.xlsx")
clr_classes <- c("#FF0000" = "DNA not usable, needs reextraction.",
                 "#FFC000" = "DNA of borderline quality - avoid if possible.",
                 "#00B050" = "DNA good, maybe re-run gel before further use. Already (planed) genotyped on SNP array.",
                 "#92D050" = "DNA good, maybe re-run gel before further use. Spare sample (high n).",
                 "#FFFFFF" = "Not checked")

data_david_con <- data_david_con <- read_xlsx(xls_david_con) |> 
  mutate(row_color = row_colors(xls_david_con)) |>
  dplyr::select(PupTissueID,
                david_con = Concentration,
                originally_considdered_borderline  =`...13`,
                row_color) |> 
  mutate(originally_considdered_borderline = !is.na(originally_considdered_borderline),
         row_color = clr_row(row_color) ,
         dna_quality_class = factor(clr_classes[row_color], levels = clr_classes))
```


```{r}
data_david_substitutes <- read_xlsx(here("data", "lab", "Kosmas_samples.xlsx")) |> 
  mutate(substitue_class = c(red = "Need substitute",
                             green = "Substitute",
                             blue = "Measure concentration!",
                             white = "Not checked",
                             yellow = "What do we do with this?")[row_color]) |> 
  dplyr::select(PupTissueID = tissue_id, substitue_class)
```


```{r}
data_with_con <- data |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status)) |> 
  filter(!duplicated(uniqueID_pup),
         PupSex == "F",
         fitness_class %in% c("Recruited", "NonRecruited") ) |>  # 4,025 × 8
  left_join(data_con) |>                                         # 4,320 × 14 (tissue samples have duplicated concentration measurements)
  left_join(data_david_con) |>                                   # 4,320 × 18
  left_join(data_david_substitutes) |>                           # 4,320 × 19
  mutate(con_check = abs(as.double(Picogreen_con)-as.double(david_con)),
         con_inconsistent = if_else(is.na(con_check), FALSE, con_check > .1 ),
         dna_con = if_else(is.na(Picogreen_con),
                           as.double(david_con),                  # incl. new concentration measurements
                           as.double(Picogreen_con)),             # incl. original bad concentrations that were not transferred to davids file
         vol_wgs_nl = 1200 / dna_con,
         vol_SNP_nl = 750 / dna_con,
         vol_total = replace_na(vol_wgs_nl,0) + replace_na(vol_SNP_nl,0))

# data_with_con |>
#   filter(con_inconsistent) |>
#   select(PupTissueID, Picogreen_con,
#          david_con, con_check,
#          `Was_re-extracted`) |> view()
con_threshold <- 45
```

Than we compute a weighting column based on the pico-green concentration, by replacing values below `r con_threshold` as well as `NA` with random negative numbers between `-150` and `-100` (to penalize those samples in the random draw later).

```{r}
data_top_con <- data_with_con |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  mutate(con_where_possible = if_else(is.na(Picogreen_con) | Picogreen_con < con_threshold,
                                      runif(n = length(Picogreen_con), -150, -100),
                                      Picogreen_con))
```

For each year, one sample is randomly chosen per recruitment status.
Try to use only SNPed samples, if necessary  fill up with un-SNPed samples where possible (if only one sample is available, pick this one).

```{r}
data_selection <- data_top_con |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status)) |>
  filter(!duplicated(uniqueID_pup),
         PupSex == "F",
         fitness_class %in% c("Recruited", "NonRecruited"),
         !grepl(PlateNumber, pattern = "[A-Za-z]"),
         !is.na(PlateNumber)) |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  slice_sample(n = 1, weight_by = scales::rescale(con_where_possible)) |> 
  # mutate(selector = sample(1:n())) |> # random selection order within year x fitness_class
  # filter(selector <= 2) |>            # slice_sample(n = 2) cant subset for years with only one sample 
  ungroup() |> 
  arrange(PupBirthyear, status, pup_SNPed) |> 
  group_by(PupBirthyear, status) |> 
  mutate(priority = row_number()) |>
  ungroup() |> 
  filter(priority <= 1) |>             # if possible, use SNPed samples, fill up if necessary
  mutate(uniqueID_pup = if_else(is.na(uniqueID_pup),   # the sample from 1977 is IDed as <NA>
                                "ID_00", uniqueID_pup)) |> # change to ID_00
  mutate(y = c(Recruited = .5,            # adding coordinates for visualization
               NonRecruited = -.5,
              BeachDead = -1.5)[status])                      
```

Looking up available alternative tissue samples for the selected individuals.

```{r}
# Collect alternative tissue IDs
uniqueIDs <- openxlsx::read.xlsx(here("data", "lab", "all_msat_genotypes_uniqueID.xlsx")) |>  
  dplyr::select(dummyID, PlateNumber, uniqueID) |> 
  filter(!dummyID %in% c("AGP08134", "AGP18084")) |>
  dplyr::select(-PlateNumber) |> 
  unique()

# Merge IDs with list of remaining individuals
tissue_options <- data_selection |> 
  left_join(uniqueIDs, by = c("uniqueID_pup" = "uniqueID")) |> 
  dplyr::rename(`AltTissueID`= dummyID ) |> 
  mutate(pup_SNPed = if_else(is.na(pup_SNPed), FALSE, pup_SNPed))

all_duplicated <- \(x){
  duplicated(x) | duplicated(x, fromLast = TRUE)
}

tissue_options %>%
  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%
  group_by(uniqueID_pup) %>%
  arrange(AltTissueID) %>%
  mutate(numbering = paste0("AltTissueID_", row_number())) %>%
  pivot_wider(id_cols = PupTissueID:Beach,
              names_from = "numbering",
              values_from = "AltTissueID") |> 
  dplyr::select(uniqueID_pup:Beach, everything()) |> 
  arrange(PupBirthyear)  |> 
  datatable(extensions = 'Buttons',
            options = list(dom = 'Blfrtip',
                           buttons = c('copy', 'csv'),
                           pageLength = 10), 
            rownames = FALSE, 
            class = 'cell-border stripe') |>  
  formatStyle(columns = 1:10,
              fontSize = '75%',
              lineHeight = "1em")
```
<br>

Summarize the sample selection by strata (year, recruitment success, SNP availability).

```{r}
#| figure-width: 13
#| fig-height: 6.5
selection_summary <- data_selection |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  summarise(n = n(),
            y = y[[1]]) |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status))

lab_c <- \(clr, lab){glue::glue("<span style='color:{clr}'>{lab}</span> ")}

data_selection |> 
ggplot(aes(x = PupBirthyear)) +
  geom_rect(aes(xmin = PupBirthyear - .475,
                xmax = PupBirthyear + .475,
                ymin = y - .475,
                ymax = y + .475,
                fill = status),
           color = "transparent") +
  geom_text(data = selection_summary |>
              group_by(status, pup_SNPed) |> 
              summarise(n = sum(n),
                        y = y[[1]]) |> 
              ungroup() ,
            aes(x = 1974, y = y, label = n, color = status),
            family = fnt_sans) +
  geom_text(data = data_selection |> 
              filter(!is.na(Picogreen_con)),
            aes(y = y, label = glue::glue("({PlateNumber}/{PlateLocation}) {round(Picogreen_con)}")),
            angle = 90, color = "white", family = "Josefin sans", fontface = "bold", size = 3) +
  facet_grid(pup_SNPed ~ ., 
             labeller = label_both,
             switch = "y") +
  scale_fill_manual(values = clrs, guide = "none") +
  scale_color_manual(values = clrs, guide = "none") +
  scale_y_continuous(breaks = c(-1.5, -.5, .5),
                     labels = map2_chr(rev(clrs), rev(names(clrs)), lab_c)) +
  coord_cartesian(ylim = c(-2, 1)) +
  theme(axis.text.y = ggtext::element_markdown(angle = 90, hjust = .5),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        strip.placement = "outside")
```

Format and export the sample selection to [`tsv` file](https://github.com/k-hench/arcgaz_gl/blob/master/data/lab/samples_temporal_initial_pick.tsv).

```{r}
sample_selection_export <- tissue_options %>%
  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%
  group_by(uniqueID_pup) %>%
  arrange(AltTissueID) %>%
  mutate(numbering = paste0("AltTissueID_", row_number())) %>%
  pivot_wider(id_cols =  c(PupTissueID:fitness_class, Picogreen_con, PlateNumber, PlateLocation),
              names_from = "numbering",
              values_from = "AltTissueID") |> 
  arrange(-PupBirthyear, uniqueID_pup) |> 
  dplyr::select(unique_id = uniqueID_pup,
                birth_year = PupBirthyear,
                status, fitness_class,
                sex = PupSex,
                SNPed = pup_SNPed,
                beach = Beach,
                picogreen_concentration = Picogreen_con,
                plate_number = PlateNumber,
                plate_location = PlateLocation,
                tissue_id = PupTissueID,
                tissue_id_alt1 = AltTissueID_1)

sample_selection_export |> 
  write_tsv(here("data", "lab", "samples_temporal_initial_pick.tsv"))
```


## Quality Check for Selected Samples

::: {#fig-gels layout-ncol=2}
![gel_1. Samples 1--13](../img/lab/2022-11-17-gel1.svg){#fig-gel2}

![gel_2. Samples 14--26](../img/lab/2022-11-17-gel2.svg){#fig-gel2}

Gels from the 2022-11-17.
:::

# Substitutes for Sample Dropouts

Grab five potential substitutes for each factor combination, excluding those selected in the initial sample selection.
We pick up a step prior to the initial sample selection to include new concentration measurements (`dna_con` instead of `Picogreen_con`).

```{r}
data_substitute_preselection <- data_with_con |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  mutate(con_where_possible = if_else(is.na(dna_con) | dna_con < con_threshold,
                                      runif(n = length(dna_con), -150, -100),
                                      dna_con)) |>
  left_join(tibble(unique_id = sample_selection_export$unique_id,
                   primary_pick = TRUE),
            by = c(PupTissueID = "unique_id")) |>
  mutate(primary_pick = if_else(is.na(primary_pick), FALSE, primary_pick),
         fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status)) |>
  filter(!duplicated(uniqueID_pup),
         PupSex == "F",
         fitness_class %in% c("Recruited", "NonRecruited"),
         !grepl(PlateNumber, pattern = "[A-Za-z]"),
         !is.na(PlateNumber),
         !primary_pick) |>
  group_by(PupBirthyear, status, pup_SNPed) |> 
  arrange(PupBirthyear, status, pup_SNPed, con_where_possible) |> 
  mutate(selector = row_number()) |>
  filter(selector <= 5) |>          
  ungroup() |> 
  group_by(PupBirthyear, status) |> 
  mutate(priority = row_number()) |>
  ungroup() |> 
  filter(priority <= 5) |>             # if possible, use SNPed samples, fill up if necessary
  mutate(uniqueID_pup = if_else(is.na(uniqueID_pup),   # the sample from 1977 is IDed as <NA>
                                "ID_00", uniqueID_pup)) # change to ID_00
```

We only need substitutes for combinations of `birth_year` and `status`, for which we don't have approved samples yet.
To figure out which samples potentially still need substitutes, we lead info about the 

```{r}
samples_without_substitutes <- read_tsv(here("data", "lab", "samples_for_sequencing.tsv")) |> 
  mutate(needs_substitute = FALSE) |> 
  left_join(sample_selection_export, by = c(PupTissueID = "tissue_id")) |> 
  dplyr::select(birth_year, status, needs_substitute) 

samples_to_remove <- read_tsv(here("data", "lab", "sample_dropouts.tsv")) |> 
  dplyr::select(unique_id = uniqueID) |> 
  bind_rows(read_tsv(here("data", "lab", "samples_for_sequencing.tsv")) |> 
  dplyr::select(unique_id = uniqueID)) |> 
  mutate(already_save = TRUE)

primary_samples_still_to_check <- sample_selection_export |> 
  dplyr::select(unique_id, tissue_id) |> 
  left_join(samples_to_remove) |>
  ungroup() |> 
  mutate(already_save = replace_na(already_save, FALSE)) |> 
  filter(!already_save)

potential_substitutes <- data_substitute_preselection |>
  left_join(samples_without_substitutes, by = c(PupBirthyear = "birth_year", status = "status")) |> 
  mutate(needs_substitute = replace_na(needs_substitute, TRUE)) |> 
  filter(needs_substitute) |> 
  dplyr::select(priority, tissue_id = PupTissueID,
                uniqueID = uniqueID_pup,
                birth_year = PupBirthyear,
                status, PlateNumber, PlateLocation,
                Picogreen_con, david_con, dna_con,
                vol_wgs_nl, vol_SNP_nl, vol_total)

sample_substitutes <- data_with_con |>
  filter(uniqueID_pup %in% primary_samples_still_to_check$unique_id) |> 
  mutate(priority = 0)|> 
  dplyr::select(priority, tissue_id = PupTissueID,
                uniqueID = uniqueID_pup,
                birth_year = PupBirthyear,
                status, PlateNumber, PlateLocation,
                Picogreen_con, david_con, dna_con,
                vol_wgs_nl, vol_SNP_nl, vol_total) |> 
  bind_rows(potential_substitutes) |> 
  arrange(birth_year, status, priority) |> 
  group_by(birth_year, status) |> 
  mutate(sample_nr = row_number()) |> 
  ungroup()

sample_substitutes |> 
  filter(is.na(dna_con)) |> 
  dplyr::select(-c(Picogreen_con:vol_total)) |> 
  arrange(PlateNumber, birth_year, status, priority) |> 
  write_tsv(here("data", "lab", "samples_needing_concentration_measurements.tsv"))

# sample_substitutes |> 
#   arrange(sample_nr, birth_year, status)
```


```{r}
sample_layout <- sample_substitutes |> 
  filter(is.na(dna_con)) |> 
  dplyr::select(-c(Picogreen_con:vol_total)) |> 
  arrange(PlateNumber, birth_year, status, priority)  |>
  filter(!duplicated(tissue_id),
         tissue_id != "AGP12249") |> 
  mutate(batch_nr = row_number() %/% 88,
         batch_idx = row_number() %% 88,
         row_idx =  (batch_idx - 1) %% 11 + 1,
         col_idx = (batch_idx - 1) %/% 11 + 1,
         col_lab = LETTERS[col_idx],
         pos = str_c(col_lab, row_idx),
         label = tissue_id |> str_remove("AG") |> 
           str_replace("([MPF][0-9]{2})([0-9]{3})", "\\1<br>\\2"))

mushrooms <- tibble(sample_id = c("17009", "17010", "17011", "17042", "17043", "17044", "17060"),
                    label = sample_id |> 
                      str_replace("([0-9]{2})([0-9]{3})", "\\1<br>\\2"),
                    x = c(8:11,1:3),
                    y = rep(7:8, c(4,3)),
                    col_lab = LETTERS[y],
                    pos = str_c(col_lab, x))

sample_layout |>
  ggplot(aes(x = row_idx, y = -col_idx)) +
  geom_polygon(inherit.aes = FALSE,
               data = tibble(x = c(0,.5,12.75,12.75,.5,0),
                             y = c(.5,0,0,8.75,8.75,8.25)),
               aes(x,-y),
               fill = NA, color = "black") +
  ggforce::geom_circle(inherit.aes = FALSE,
                       data = cross_df(list( x = 1:12, y = 1:8)) |> 
                         mutate(idx = row_number(),
                                grp = if_else(x == 12,
                                              "control",
                                              if_else(idx <= 79,
                                                      "seal",
                                                      if_else(idx <= 87,
                                                      "mushroom",
                                                      "empty")))),
                       aes(x0 = x, y0 = -y,color = grp, r = .45),
                       fill = "transparent") +
  ggtext::geom_richtext(aes(label = label),
                        fill = NA, label.color = NA, # remove background and outline
                        label.padding = grid::unit(rep(0, 4), "pt"),
                        family = fnt_sans, vjust = .55 )  +
  ggtext::geom_richtext(inherit.aes = FALSE,
                        data = mushrooms,
                        aes(x = x, y = -y, label = label),
                        fill = NA, label.color = NA, # remove background and outline
                        label.padding = grid::unit(rep(0, 4), "pt"),
                        family = fnt_sans, vjust = .55 ) +
  geom_text(data = tibble(x = c(1:12,rep(.3,8)),
                          y = c(rep(.3,12),1:8),
                          lab = c(1:12, LETTERS[1:8] )),inherit.aes = FALSE,
            aes(x,-y,label = lab),family = fnt_serif) +
  scale_x_continuous(NULL, limits = c(-.3, 12.9 ), breaks = 1:12, position = "top") +
  scale_y_continuous(NULL, limits = c(-9.3, .3 ), breaks = -8:-1, labels = LETTERS[8:1]) +
  scale_color_manual(NULL, values = scales::colour_ramp(c(clr1,"gray90","black"))(seq(1, 0, length.out = 4))) +
  coord_equal(expand = 0) +
  theme_void() +
  theme(legend.position = "bottom")

# ggsave("~/Desktop/2022-11-23_sample_layout.pdf", width = 8, height = 6, device = cairo_pdf)
# 
# sample_layout |> 
#    dplyr::select(SampleID = tissue_id,
#                  Well = pos) |> 
#   bind_rows(mushrooms |> 
#               dplyr::select(SampleID = sample_id,
#                  Well = pos)) |> 
#    write_tsv("~/Desktop/2022-11-23_sample_layout.tsv")
```

```{r, eval = FALSE}
# first line of candidates (for check with E)
selection_david <- read_tsv("~/work/hoffman_lab/lab/david/First_shipment.txt") |> 
  pivot_longer(names_to = "plate_david",
               names_prefix = "Plate_",
               names_transform = as.numeric,
               everything(),
               values_to = "tissue_id")

sample_substitutes |> 
  mutate(PlateNumber = as.numeric(PlateNumber)) |> 
  left_join(selection_david) |>
  arrange(sample_nr, birth_year, status) |> 
   filter(is.na(plate_david)) |>
#  # group_by(birth_year, status) |> 
#  # count() |> 
#  # ggplot(aes(x = birth_year, y = n, color = status)) +
#  # geom_hline(yintercept = 1:4,lintype = 3) +
#  # geom_bar(stat = "identity", aes(fill = after_scale(color))) +
#  # facet_grid(status~.)
  filter(row_number() <= (13 * 4 + 6),
         sample_nr <= 2) |>
  # group_by(birth_year, status) |> 
  # filter(sample_nr == 1) |>   # (priority == min(priority)) |> 
  dplyr::select(-plate_david) |> 
  rename(year = "birth_year",
         plate = "PlateNumber",
         loc = "PlateLocation",
         pico_con = "Picogreen_con") |> 
  mutate(added = c("", "x")[(row_number() > 52) + 1]) |> 
  filter(!(tissue_id %in% c("AGP97053", "AGP99069", "AGP05161", "AGF94134")), # ! LAST ONE IS THE 1980 SAMPLE
          !duplicated(tissue_id)             ) |> 
  arrange(plate, year, status) |> 
  left_join(selection_david |>
  write_tsv("~/work/hoffman_lab/arcgaz_SPP/arcgaz_gl/data/lab/2022-11-24_samples_for_gels_p5.tsv")
```

# Comparison to biomarker QC

```{r}
biomarker_qc <- read_tsv("~/work/hoffman_lab/arcgaz_SPP/lab_reports/BMK220615-AX608-QC Report/BMK_xml/SAMPLE_MX.txt") |> 
  mutate(PupTissueID = str_c("AG",  `Sample name`)) |> 
  left_join(data_with_con)

p1 <- biomarker_qc |> 
  ggplot(aes(x = `Qubit(ng/ul)`, y = Picogreen_con, color = `Quality grade`)) +
  # geom_point(size = 2) +
  geom_text(size = 5, aes(label = `Gel ID`)) +
  geom_abline(slope = 1, linetype = 3) +
  scale_color_manual(values = scales::colour_ramp(c(clr1,"gray90","black"))(seq(1, 0, length.out = 4))) +
  coord_equal()

p2 <-  biomarker_qc |>
  ggplot(aes(x = `Qubit(ng/ul)`, y = NanoVue_con, color = `Quality grade`)) +
  # geom_point(size = 2) +
  geom_text(size = 5, aes(label = `Gel ID`)) +
  geom_abline(slope = 1, linetype = 3) +
  scale_color_manual(values = scales::colour_ramp(c(clr1,"gray90","black"))(seq(1, 0, length.out = 4))) #+
#  coord_equal()

p1 + p2  + plot_layout(guides = "collect") & theme(legend.position = "bottom")
```

 <!--
Glimpse at how the selected samples compare in terms of pico green concentration with the overall concentration distribution.

```{r}
#| figure-width: 5
#| fig-height: 2.5
#| eval: false
data_con |> 
  filter(!is.na(Picogreen_con)) |> 
  ggplot(aes(x = Picogreen_con)) +
  geom_density(data = data_selection |> 
  filter(!is.na(Picogreen_con)) ,
               aes(color = status,
                   fill = after_scale(prismatic::clr_alpha(color, .15)),
                   y = ..count..),
  adjust = .6) +
    geom_density(aes(y = ..count.. / 25),
               adjust = .6, linetype = 3) +
   scale_color_manual(values = clrs, guide = "none") +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
```


```{r}
#| eval: false
na_dash <- \(x){if_else(is.na(x), "-", as.character(x))}

sample_selection_export |> 
  mutate(status = factor(status, levels = c("Recruited", "NonRecruited", "BeachDead")),
         SNPed = factor(SNPed, levels = c("TRUE", "FALSE"))) |> 
  arrange( SNPed, status, -picogreen_concentration) |> 
  ungroup() |> 
  mutate(picogreen_concentration = sprintf("%.1f", picogreen_concentration),
         across(everything(),
                na_dash),
         send_rank = row_number()) |>
  dplyr::select(send_rank, everything()) |> 
  dplyr::select(-fitness_class) |> 
  knitr::kable(format =  "latex")
```
--->
