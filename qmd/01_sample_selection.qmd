---
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Sample selection

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(dev = "svg",
                      comment = "#>",
                      dev.args = list(bg = "transparent"))

library(tidyverse)
library(readxl)
library(here)
library(DT)
source(here("R", "theme_kh.R"))
set.seed(42)
clrs <- c(Recruited = clr1,
          NonRecruited = clr2,
          BeachDead = clr3)
```

Samples with issues, to avoid for sample selection.

```{r}
troubblemakers <- c(
   "AGP00150", # 2_explore..., l 23, duplicated tissue id
   "AGP08134", # 2_explore..., l 65 ff potential sample mixup
   "AGP08139", #                       continued
   "AGP18084"  # 2_explore..., l 69, mum genetic mismatch
   # REMEMBER TO ALSO EXCLUDE THE SAMPLES THAT HAVE ALREADY BEEN RESEQED
)
```


Read in Annekes cleaned sample list.
Then, give an overview of the available samples over the years, stratified by recruitment success and SNP genotype availability.

```{r}
#| figure-width: 7
#| fig-height: 5
data <- readxl::read_xlsx(here("data/lab/Unique_filtered_dataset_2022.xlsx")) |> 
  dplyr::select(PupTissueID, uniqueID_pup, PupBirthyear, status, PupSex, pup_SNPed, Beach) |> 
  filter(Beach == "SSB",
         PupSex == "F",
         !is.na(PupBirthyear),
         !(PupTissueID %in% troubblemakers))

# data |> 
#   group_by(uniqueID_pup) |> 
#   count() |> arrange(-n) 
#  # group_by(n) |>
#  # count()

data |> 
  filter(!duplicated(uniqueID_pup)) |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  count() |> 
  ggplot() +
  # geom_hline(yintercept = 2, linetype = 3 ) +
  geom_bar(aes(x = PupBirthyear, y = n, fill = status),
           stat = "identity",
           position = position_dodge2(width = 0.9, preserve = "single"),
           color = "transparent") +
  facet_grid(pup_SNPed ~ .,
             labeller = label_both,
             switch = "y") +
  scale_fill_manual(values = clrs) +
  theme(legend.position = "bottom",
        axis.line.x = element_line(size = .2),
        legend.key.height = unit(2, "pt"))
```

To be able to include information about the available DNA extractions into the sample selection, we read in the tissue sample specific concentrations and merge them to the data.

```{r}
data_con <- readxl::read_xlsx(here("data/lab/Agaz_DNA_extraction_info.xlsx")) |> 
   rename(PupTissueID = SampleID)
 
data_with_con <- data |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status)) |> 
  filter(!duplicated(uniqueID_pup),
         PupSex == "F",
         fitness_class %in% c("Recruited", "NonRecruited") ) |>
  left_join(data_con)

con_threshold <- 45
```

Than we compute a weighting column based on the pico-green concentration, by replacing values below `r con_threshold` as well as `NA` with random negative numbers between `-150` and `-100` (to penalize those samples in the random draw later).

```{r}
data_top_con <- data_with_con |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  mutate(con_where_possible = if_else(is.na(Picogreen_con) | Picogreen_con < con_threshold,
                                      runif(n = length(Picogreen_con), -150, -100),
                                      Picogreen_con))
```

For each year, one sample is randomly chosen per recruitment status.
Try to use only SNPed samples, if necessary  fill up with un-SNPed samples where possible (if only one sample is available, pick this one).

```{r}
data_selection <- data_top_con |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status)) |>
  filter(!duplicated(uniqueID_pup),
         PupSex == "F",
         fitness_class %in% c("Recruited", "NonRecruited"),
         !grepl(PlateNumber, pattern = "[A-Za-z]"),
         !is.na(PlateNumber)) |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  slice_sample(n = 1, weight_by = scales::rescale(con_where_possible)) |> 
  # mutate(selector = sample(1:n())) |> # random selection order within year x fitness_class
  # filter(selector <= 2) |>            # slice_sample(n = 2) cant subset for years with only one sample 
  ungroup() |> 
  arrange(PupBirthyear, status, pup_SNPed) |> 
  group_by(PupBirthyear, status) |> 
  mutate(priority = row_number()) |>
  ungroup() |> 
  filter(priority <= 1) |>             # if possible, use SNPed samples, fill up if necessary
  mutate(uniqueID_pup = if_else(is.na(uniqueID_pup),   # the sample from 1977 is IDed as <NA>
                                "ID_00", uniqueID_pup)) |> # change to ID_00
  mutate(y = c(Recruited = .5,            # adding coordinates for visualization
               NonRecruited = -.5,
              BeachDead = -1.5)[status])                      
```

Looking up available alternative tissue samples for the selected individuals.

```{r}
# Collect alternative tissue IDs
uniqueIDs <- openxlsx::read.xlsx(here("data/lab/all_msat_genotypes_uniqueID.xlsx")) |>  
  dplyr::select(dummyID, PlateNumber, uniqueID) |> 
  filter(!dummyID %in% c("AGP08134", "AGP18084")) |>
  dplyr::select(-PlateNumber) |> 
  unique()

# Merge IDs with list of remaining individuals
tissue_options <- data_selection |> 
  left_join(uniqueIDs, by = c("uniqueID_pup" = "uniqueID")) |> 
  dplyr::rename(`AltTissueID`= dummyID ) |> 
  mutate(pup_SNPed = if_else(is.na(pup_SNPed), FALSE, pup_SNPed))

all_duplicated <- \(x){
  duplicated(x) | duplicated(x, fromLast = TRUE)
}

tissue_options %>%
  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%
  group_by(uniqueID_pup) %>%
  arrange(AltTissueID) %>%
  mutate(numbering = paste0("AltTissueID_", row_number())) %>%
  pivot_wider(id_cols = PupTissueID:Beach,
              names_from = "numbering",
              values_from = "AltTissueID") |> 
  dplyr::select(uniqueID_pup:Beach, everything()) |> 
  arrange(PupBirthyear)  |> 
  datatable(extensions = 'Buttons',
            options = list(dom = 'Blfrtip',
                           buttons = c('copy', 'csv'),
                           pageLength = 10), 
            rownames = FALSE, 
            class = 'cell-border stripe') |>  
  formatStyle(columns = 1:10,
              fontSize = '75%',
              lineHeight = "1em")
```
<br>

Summarize the sample selection by strata (year, recruitment success, SNP availability).

```{r}
#| figure-width: 13
#| fig-height: 6.5
selection_summary <- data_selection |> 
  group_by(PupBirthyear, status, pup_SNPed) |> 
  summarise(n = n(),
            y = y[[1]]) |> 
  mutate(fitness_class = if_else(status %in% c("BeachDead", "NonRecruited"),
                                 "NonRecruited", status))

lab_c <- \(clr, lab){glue::glue("<span style='color:{clr}'>{lab}</span> ")}

data_selection |> 
ggplot(aes(x = PupBirthyear)) +
  geom_rect(aes(xmin = PupBirthyear - .475,
                xmax = PupBirthyear + .475,
                ymin = y - .475,
                ymax = y + .475,
                fill = status),
           color = "transparent") +
  geom_text(data = selection_summary |>
              group_by(status, pup_SNPed) |> 
              summarise(n = sum(n),
                        y = y[[1]]) |> 
              ungroup() ,
            aes(x = 1974, y = y, label = n, color = status),
            family = fnt_sans) +
  geom_text(data = data_selection |> 
              filter(!is.na(Picogreen_con)),
            aes(y = y, label = glue::glue("({PlateNumber}/{PlateLocation}) {round(Picogreen_con)}")),
            angle = 90, color = "white", family = "Josefin sans", fontface = "bold", size = 3) +
  facet_grid(pup_SNPed ~ ., 
             labeller = label_both,
             switch = "y") +
  scale_fill_manual(values = clrs, guide = "none") +
  scale_color_manual(values = clrs, guide = "none") +
  scale_y_continuous(breaks = c(-1.5, -.5, .5),
                     labels = map2_chr(rev(clrs), rev(names(clrs)), lab_c)) +
  coord_cartesian(ylim = c(-2, 1)) +
  theme(axis.text.y = ggtext::element_markdown(angle = 90, hjust = .5),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        strip.placement = "outside")
```

Format and export the sample selection to [`tsv` file](https://github.com/k-hench/arcgaz_gl/blob/master/data/samples_temporal.tsv).

```{r}
sample_selection_export <- tissue_options %>%
  mutate(AltTissueID = ifelse(AltTissueID == PupTissueID, NA, AltTissueID)) %>%
  group_by(uniqueID_pup) %>%
  arrange(AltTissueID) %>%
  mutate(numbering = paste0("AltTissueID_", row_number())) %>%
  pivot_wider(id_cols =  c(PupTissueID:fitness_class, Picogreen_con, PlateNumber, PlateLocation),
              names_from = "numbering",
              values_from = "AltTissueID") |> 
  arrange(-PupBirthyear, uniqueID_pup) |> 
  dplyr::select(unique_id = uniqueID_pup,
                birth_year = PupBirthyear,
                status, fitness_class,
                sex = PupSex,
                SNPed = pup_SNPed,
                beach = Beach,
                picogreen_concentration = Picogreen_con,
                plate_number = PlateNumber,
                plate_location = PlateLocation,
                tissue_id = PupTissueID,
                tissue_id_alt1 = AltTissueID_1)

sample_selection_export |> 
  write_tsv(here("data", "samples_temporal.tsv"))
```

Glimpse at how the selected samples compare in terms of pico green concentration with the overall concentration distribution.

```{r}
#| figure-width: 5
#| fig-height: 2.5
data_con |> 
  filter(!is.na(Picogreen_con)) |> 
  ggplot(aes(x = Picogreen_con)) +
  geom_density(data = data_selection |> 
  filter(!is.na(Picogreen_con)) ,
               aes(color = status,
                   fill = after_scale(prismatic::clr_alpha(color, .15)),
                   y = ..count..),
  adjust = .6) +
    geom_density(aes(y = ..count.. / 25),
               adjust = .6, linetype = 3) +
   scale_color_manual(values = clrs, guide = "none") +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
```

 <!s--
```{r}
#| eval: false
na_dash <- \(x){if_else(is.na(x), "-", as.character(x))}

sample_selection_export |> 
  mutate(status = factor(status, levels = c("Recruited", "NonRecruited", "BeachDead")),
         SNPed = factor(SNPed, levels = c("TRUE", "FALSE"))) |> 
  arrange( SNPed, status, -picogreen_concentration) |> 
  ungroup() |> 
  mutate(picogreen_concentration = sprintf("%.1f", picogreen_concentration),
         across(everything(),
                na_dash),
         send_rank = row_number()) |>
  dplyr::select(send_rank, everything()) |> 
  dplyr::select(-fitness_class) |> 
  knitr::kable(format =  "latex")
```
--->
